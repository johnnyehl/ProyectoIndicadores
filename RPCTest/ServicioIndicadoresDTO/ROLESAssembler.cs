//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2014/02/16 - 11:41:11
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using ServiciosIndicadoresEntities;

namespace ServicioIndicadoresDTO
{

    /// <summary>
    /// Assembler for <see cref="ROLES"/> and <see cref="ROLESDTO"/>.
    /// </summary>
    public static partial class ROLESAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ROLESDTO"/> converted from <see cref="ROLES"/>.</param>
        static partial void OnDTO(this ROLES entity, ROLESDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="ROLES"/> converted from <see cref="ROLESDTO"/>.</param>
        static partial void OnEntity(this ROLESDTO dto, ROLES entity);

        /// <summary>
        /// Converts this instance of <see cref="ROLESDTO"/> to an instance of <see cref="ROLES"/>.
        /// </summary>
        /// <param name="dto"><see cref="ROLESDTO"/> to convert.</param>
        public static ROLES ToEntity(this ROLESDTO dto)
        {
            if (dto == null) return null;

            var entity = new ROLES();

            entity.IDROL = dto.IDROL;
            entity.CODROL = dto.CODROL;
            entity.NOMROL = dto.NOMROL;
            entity.ESTADO = dto.ESTADO;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="ROLES"/> to an instance of <see cref="ROLESDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="ROLES"/> to convert.</param>
        public static ROLESDTO ToDTO(this ROLES entity)
        {
            if (entity == null) return null;

            var dto = new ROLESDTO();

            dto.IDROL = entity.IDROL;
            dto.CODROL = entity.CODROL;
            dto.NOMROL = entity.NOMROL;
            dto.ESTADO = entity.ESTADO;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ROLESDTO"/> to an instance of <see cref="ROLES"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<ROLES> ToEntities(this IEnumerable<ROLESDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="ROLES"/> to an instance of <see cref="ROLESDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ROLESDTO> ToDTOs(this IEnumerable<ROLES> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
