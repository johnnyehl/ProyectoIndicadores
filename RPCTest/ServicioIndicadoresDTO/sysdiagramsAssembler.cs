//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2014/02/16 - 11:41:11
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using ServiciosIndicadoresEntities;

namespace ServicioIndicadoresDTO
{

    /// <summary>
    /// Assembler for <see cref="sysdiagrams"/> and <see cref="sysdiagramsDTO"/>.
    /// </summary>
    public static partial class sysdiagramsAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="sysdiagramsDTO"/> converted from <see cref="sysdiagrams"/>.</param>
        static partial void OnDTO(this sysdiagrams entity, sysdiagramsDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="sysdiagrams"/> converted from <see cref="sysdiagramsDTO"/>.</param>
        static partial void OnEntity(this sysdiagramsDTO dto, sysdiagrams entity);

        /// <summary>
        /// Converts this instance of <see cref="sysdiagramsDTO"/> to an instance of <see cref="sysdiagrams"/>.
        /// </summary>
        /// <param name="dto"><see cref="sysdiagramsDTO"/> to convert.</param>
        public static sysdiagrams ToEntity(this sysdiagramsDTO dto)
        {
            if (dto == null) return null;

            var entity = new sysdiagrams();

            entity.name = dto.name;
            entity.principal_id = dto.principal_id;
            entity.diagram_id = dto.diagram_id;
            entity.version = dto.version;
            entity.definition = dto.definition;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="sysdiagrams"/> to an instance of <see cref="sysdiagramsDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="sysdiagrams"/> to convert.</param>
        public static sysdiagramsDTO ToDTO(this sysdiagrams entity)
        {
            if (entity == null) return null;

            var dto = new sysdiagramsDTO();

            dto.name = entity.name;
            dto.principal_id = entity.principal_id;
            dto.diagram_id = entity.diagram_id;
            dto.version = entity.version;
            dto.definition = entity.definition;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="sysdiagramsDTO"/> to an instance of <see cref="sysdiagrams"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<sysdiagrams> ToEntities(this IEnumerable<sysdiagramsDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="sysdiagrams"/> to an instance of <see cref="sysdiagramsDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<sysdiagramsDTO> ToDTOs(this IEnumerable<sysdiagrams> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
